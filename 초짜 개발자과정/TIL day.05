자바에서 엄청나게 중요한 for문을 배운 날이다. 2주가 지난 지금도 너무나도 열심히 쓰고 있는 for문이다.
누군가 이 글을 본다면 for문을 배울 때는 특히 더 졸지 말라고 말해주고 싶다.
연산자 역시 중요하게 느껴졌다.

예금 출금이 가능한 척 하는 은행 ATM 비슷한 것을 만들었다. 실제로도 잔고가 9999999999원이 되었으면 좋겠다.
점점 더 코딩이 재밌어지고있다.

내가 적는대로 무언가 실행된다는건 참 재밌는 일이다.



package koreait.day05;

public class C22_AssignTest {

	public static void main(String[] args) {
		
		//참고 증가(감소)연산자, 축약연산자(+=, -=, *=, /=, ...)
		int i = 10, sum; sum=0;
		i= i+1; //i=11
		i+=1; // i=12
		i++; //i= 13(후치: postfix)
		++i; // i= 14 (전치: prefix)
		// 전치와 후치는 다른 명령어들과 같이 쓸 때는 차이가 있음.
		System.out.println("i++ ? " + i++); //? 출력은 14지만 i값은 15가 됐음
		System.out.println("++i ? "+ ++i); //출력 16, i값 16
		
				
		sum= sum+i; //sum=16
		sum+=i; //sum=32
		
		System.out.println("sum?" + sum); //32
		
		i--;
		--i;
		sum= sum-10;
		sum -=10;
		
		
		
	}

}


package koreait.day05;

public class C23_ForTest {

	public static void main(String[] args) {
		
		//명령문의 반복1
		System.out.println("hello!");
		System.out.println("hello!");
		System.out.println("hello!");
		System.out.println("hello!");
		System.out.println("hello!");

		
		//명령문의 반복2
		System.out.println("hello!(1)");
		System.out.println("hello!(2)");
		System.out.println("hello!(3)");
		System.out.println("hello!(4)");
		System.out.println("hello!(5)");
		
//		for(변수초기값;실행조건식;증감식)		//변수는 loop counter(반복문 횟수를 제어하는 역할)
		for(int i=0;i<5;i++)	{		//i를 for() 안에서 선언하면 for에서만 사용할수 있습니다.(for { }의 지역변수)
			//i는 0부터 4까지 변경되면서 실행합니다.
			System.out.println("헬로우 !");		//i=0 , 0<5 참 -> 출력 실행 -> i++
			System.out.println(i);
			System.out.println("////////");		//i=1 , 1<5 참 ->    " -> i++
		}						//i=2, 2<5 참 ->     "    -> i++
								//	:
								//i=5, 5<5 거짓 -> for종료
		System.out.println("---------------------------");	
		//다른 예시
		for(int i=0;i<10;i+=4)			//결과는?
			System.out.println("hello!!!!!");  
		
		System.out.println("---------------------------");	
		for(int i=0;i<0;i++) 			//결과는?
			System.out.println("헬로우!!!!!");

		System.out.println("---------------------------");	
		for(int i=3; i>0; i--) {
		System.out.println("헬로우 !");	
		System.out.println(i);
		System.out.println("////////");
		}
		System.out.println("---------------------------");	
		
		// 조건식과 증감식이 멈추는 조건이 없는경우-->무한루프(반복), 강제종료 필요
		
		// 위 명령문의 반복2를 for로 출력해보세요.

		for(int i=0; i<5; i++)
			System.out.println("Hello("+(i+1)+")");


		
		
	}

}



package koreait.day05;

import java.util.Scanner;

public class C24_StartPrint {

	public static void main(String[] args) {
		
		Scanner sc= new Scanner(System.in);
		
		System.out.println("[[영화감상후기]]");
		
		System.out.print("평점을 몇점 주시겠습니까 1~5 >>>");
		
		int count = sc.nextInt();
		System.out.println("방법 1");
		for(int i=0; i<count; i++)
		System.out.print("★");

		
		System.out.println("\n\n방법 2");
		for(int i=0; i<count; i++)
		System.out.print("★");
		for(int i=0; i<5-count; i++)
		System.out.print("☆");
		
		
		System.out.println("\n\n방법 3");
		for(int i=0; i<5; i++)
			if(i<count)
		System.out.print("★");
			else
		System.out.print("☆");
		
		
		System.out.println("\n\n방법 4");
		int k; //loop counter변수가 main 메소드의 지역변수
		for(k=0; k<count; k++) //count= 3
			System.out.print("★");
		
		System.out.println("k="+k);//위에서 k는 3으로 끝났기에 k=3
		for(;k<5;k++)				//k의 값은 3부터 시작하게 됨.k는 count부터 시작하는 효과
			System.out.print("☆");			
		
	}

}


package koreait.day05;

import java.util.Scanner;

public class C25_WhileTest {

	public static void main(String[] args) {
		
		//비교
		for(int i=0; i<5; i++)
		System.out.println("Hello("+(i+1)+")");
		
		//while문 형식 -반드시 중괄호 필요함. 조건식과 증감식이 모두 필요하기 때문
		// loop counter 변수는 while문 밖에서 선언해야 함.
		int j=0;
		while(j<5) {//조건식
			System.out.println("Hello("+(j+1)+")");
			
			j++;//증감식
		}
		
		//예시: for 문은 1부터 100까지 더하는 연속적인 값을 대상으로 할 때 적합함.
		// while문은 아직 정해지지 않은 값을 대상으로 할 때 적합함.
		// 반복문과 함께 사용하는 명령문- break, continue(continue뒤에 있는 명렁을 실행하지 않고 반복명령 처음으로 돌아감.
		int k=0 , sum=0;
		Scanner sc= new Scanner(System.in);
		System.out.println("입력한 숫자를 모두 더하는 계산기(종료 :-1");
		while(k!=-1) { // k가 -1이 아닌 동안 실행
			System.out.println("정수 입력>>>");
			k= sc.nextInt();
			sum +=k; //sum=sum+k
			
		}
		System.out.println("sum="+ sum);
		
		sum=0;
		k=0;
		System.out.println("\n\n 입력한 정수를 모두 더하는 계산기입니다.[ver.2.0](종료:-1)");
		do {
			sum+=k;
			System.out.print("정수입력>>>");
			k=sc.nextInt();
		}while(k!=-1);
		System.out.println("sum="+sum);
		
		sum=0;
		System.out.println("\n\n 입력한 정수를 모두 더하는 계산기입니다.[ver.2.1](종료:-1)");
		while(true) {
			if(k==-1) break; //항상 참일 때 , 탈출(종료) 조건과 break문 사용.
			
			sum+=k;
			
		}
		System.out.println("sum=" +sum);
		
		
		sum=0;
		System.out.println("\n\n 입력한 정수를 모두 더하는 계산기입니다.[ver.2.2](종료:-1)");
		boolean isState= true;
		while(isState) {
			System.out.print("정수입력 >>>");
			k= sc.nextInt();
			if(k==-1) isState=false;
			else sum+=k;
		}
		System.out.println("sum="+sum);
		
		
		//continue연습 : 입력된 값이 10의 배수이면 sum 에 더하지 않고 다시 입력받기
		sum= 0;
		while(true) {
			System.out.print("정수입력 >>>");
			k= sc.nextInt();
			if(k==-1) break;
			if(k%10==0) continue; // 아래 명령어들은 실행하지 않고 다시 처음으로
			sum+=k;
		}
		System.out.println("sum="+sum);
		
		sc.close();
		

	}

}


package koreait.day05;

import java.util.Scanner;

/*
 * GUI graphic User Interface (사용자 명령을 아이콘, 메뉴방식으로 처리)
 * CLI command Line Interface (사용자명령을 텍스트로만 처리)
 */

public class C26_BankExam {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		boolean run= true;
		int sel;
		int balance=0;
		
		while(run) {
			int money; 
			System.out.println("--------------------------");
			System.out.println(" 1. 예금 | 2. 출금 | 3. 잔고 확인 | 4. 종료 ");
			System.out.println("--------------------------");
			System.out.print("메뉴 선택 >>>");
			sel= sc.nextInt();
			
			switch(sel) {
			case 1: //예금처리(예금금액입력-> 잔액에 더하기
				System.out.print("예금액 >");
				money= sc.nextInt();
				balance += money;
				System.out.println("고객님의 잔액은" + balance + "원 입니다");
				break;
				
			case 2: //출금 처리(출금 금액 입력 -> 잔액보다 많지 않을 때 처리(잔액에서 처리))
				System.out.println("출금액 >");
				money = sc.nextInt();
				
				if(money > balance) System.out.println("잔액이 부족합니다");
				
				else{balance -= money;	
					System.out.println("고객님의 잔액은" + balance + "원 입니다");
				}
				
				break;
				
			case 3: // 잔고 (balance) 출력
				System.out.print("현재 잔고" + balance);
				System.out.println();//줄바꿈
				break;
				
			case 4: //반복 종료
				System.out.println("프로그램을 종료합니다.");
				run= false;
				break;
				
			default : // 1 2 3 4 외 나머지 값일 때
				System.out.println("잘못된 선택입니다. 값은 1~4 만 입력하세요.");
				
			
			}
			
			
		}

	}

}


package koreait.day05;

import java.util.Arrays;

public class C27_IntArray {

	public static void main(String[] args) {
		
		// 배열선언
		int[] arr1 = {67, 45, 98, 12, 45, 66, 95}; //초기값 설정
		int[] arr2 = new int[7]; //배열의 크기만 설정 - 기본초기값 있나요? 답 :0
		
		System.out.println("\n배열이름(참조형변수)으로 출력");
		System.out.println(arr1); //16진수 출력. 참조값과 연관있는 해쉬코드값
		System.out.println(arr1.hashCode()); // 10진수.
		
		//배열 요소값 1개 출력
		
		System.out.println(" \n 배열요소값 1개 출력 (index 3번}");
		System.out.println("arr1[3] = ?" + arr1[3]);
		System.out.println("arr2[3] = ?" + arr2[3]);
		

		System.out.println("\n 배열 요소값 1개 저장(인덱스 3번)");
		arr1[3]=999;
		arr2[3]=999;

		//선언된 배열의 값을 모두 출력할 수 있는 문자열로 변환시키는 메소드
		String temp = Arrays.toString(arr1); //toString은 static 메소드, 메소드의 리턴형식 
		System.out.println("arr1: "+temp);
		System.out.println("arr2: "+Arrays.toString(arr2));

		//출력예시 : arr1[0]= 67 이런 형식으로 모든 값을 출력하고 싶다면 -> for문
		for(int i=0; i<7; i++)
		System.out.println("arr1["+i+"]= " + arr1[i]);
		
		System.out.println("\n for문으로 배열요소값 출력(arr2)");

		for(int i=0; i<arr2.length; i++) {//*중요*배열은 배열요소의 갯수(크기) 를 갖고있는 필드 length가 있음
			String t = String.format("arr2[%d] = %d", i, arr2[i]); // format을 적용해서 문자열을 생성
			System.out.println(t);
			
			//System.out.printf("arr2[%d] = %d\n", i, arr2[i]);
		}
		
		System.out.println("\n배열의 크기(바이트)");
		System.out.println("arr1 배열 :" + arr1.length*Integer.BYTES + "바이트");
		System.out.println("arr2 배열 :" + arr2.length*Integer.BYTES + "바이트");
		
		System.out.println("\n 내가만든 메소드로 배열값 출력");
		arrayPrint(arr1, "arr1");
		arrayPrint(arr2, "arr2");
		// 메소드의 매개변수는 참조형 변수임
		
	}

	public static void arrayPrint(int[]array, String name) { //인자 : int 배열, String 
		//int 배열을 인자로 전달받아  arr1[0]= 67 형식으로 값을 출력
		for(int i=0; i<array.length; i++) {//*중요*배열은 배열요소의 갯수(크기) 를 갖고있는 필드 length가 있음
			String t = String.format("%s[%d] = %d", name, i, array[i]); // format을 적용해서 문자열을 생성
			System.out.println(t);
			
			//System.out.printf("arr2[%d] = %d\n", i, arr2[i]);
		}
		
		
	}
	
}


package koreait.day05;

import java.util.Scanner;
//작성자 : 이민호
public class C28_IntArrayEx {
	/*
	 * 1. int 배열 크기 5 선언. 이름은 nums
	 * 2. 배열요소의 값은 사용자 입력으로 저장
	 * 3. 입력된 값의 합계, 평균을 구함-> 합계는 2번에서 입력받는 for 문 안에서 수식작성
	 * 4. 입력된 값의 최대값, 최소값을 구하는 메소드를 만듦
	 *    ㄴ maxOfArray, minOfArray : 인자는 int배열, 반환값형식은 int
	 *  
	 * 
	 */
	
	
	//max, min 변수를 배열의 0번 요소값으로 초기화.
	// 배열요소 1번부터 마지막요소까지 max, min과 순서대로 비교해서
	//max가 그 값보다 작으면(min이 그 값보다 크면 ) max(min) 값을 배열요소값으로 변경합니다.
	// -> 비교가 끝나면 최종 max min이 결정됩니다.
	
	
	
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);

		int sum=0;
		int[] nums = new int[5];
		int ex= nums.length;
		
		for(int i=0; i<ex; i++){
	           System.out.print("배열요소 값을 입력하세요 ");
	           nums[i] = sc.nextInt(); 
	           
	           
	           sum+=nums[i];
	           System.out.println("합계는= "+ sum);
		}
		
        System.out.println("평균값은 ="+ (float)(sum/ex));
      
        int max= maxOfArray(nums);
        
		System.out.println("최대값은 "+max +"입니다");  
		
		int min= minOfArray(nums);
		System.out.println("최대값은 "+min +"입니다");  
				
		sc.close();
	}
	
	
	public static int maxOfArray(int[]array){
		
		  int max= array[0];

		for(int i=1; i<array.length; i++) {
			if(max<array[i])  //비교값이 max보다 큼.
				max= array[i];	
		}
		return max;
	}
	
	
	public static int minOfArray(int[]array) {
	      int min= array[0];
	      
		for(int i=1; i<array.length; i++) 
			if(min>array[i])
				min= array[i];

		return min;
	}
	
}

